// import { Button } from '@/components/ui/button'
// import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
// import { ArrowUpRight } from 'lucide-react'
// import Link from 'next/link'
// import { BarChartComponent } from './_components/bar-chart'
// import { BarChartBetter } from './_components/bar-chart-better'

// export default async function Dashboard() {

//   return (
//     <div className='flex flex-col justify-center items-start flex-wrap px-4 pt-4 gap-4'>
//       <Card className='w-[20rem]'>
//         <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
//           <CardTitle className="text-sm font-medium">
//             Welcome to Nextjs Starter Kit
//           </CardTitle>
//           <svg
//             xmlns="http://www.w3.org/2000/svg"
//             viewBox="0 0 24 24"
//             fill="none"
//             stroke="currentColor"
//             strokeLinecap="round"
//             strokeLinejoin="round"
//             strokeWidth="2"
//             className="h-4 w-4 text-muted-foreground"
//           >
//             <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6" />
//           </svg>
//         </CardHeader>
//         <CardContent>
//           <div className="text-2xl font-bold">100</div>
//           <p className="text-xs text-muted-foreground">
//             Enter your subtitle here
//           </p>
//         </CardContent>
//       </Card>
//       <div className='flex flex-wrap gap-2'>
//         <BarChartComponent />
//         <BarChartBetter />
//       </div>
//       <div className='grid md:grid-cols-2 sm:grid-cols-1 w-full gap-3'>
//         <Card className="">
//           <CardHeader className="flex flex-row items-center">
//             <div className="grid gap-2">
//               <CardTitle>Latest Projects</CardTitle>
//               <CardDescription>
//                 Recent projects generated by Nextjs Starter Kit
//               </CardDescription>
//             </div>
//             <Button asChild size="sm" className="ml-auto gap-1">
//               <Link href="/dashboard/projects">
//                 View All
//                 <ArrowUpRight className="h-4 w-4" />
//               </Link>
//             </Button>
//           </CardHeader>
//           <CardContent>
//             <div style={{ maxHeight: '320px', overflowY: 'auto' }}> {/* Adjust maxHeight according to your design */}
//               <main className="flex flex-col gap-2 lg:gap-2 h-[300px] w-full">
//                 <div className="flex flex-1 items-center justify-center rounded-lg border border-dashed shadow-sm">
//                   <div className="flex flex-col items-center text-center">
//                     <h1 className="text-xl font-bold">
//                       You have no projects
//                     </h1>
//                     <p className="text-sm text-muted-foreground mb-3">
//                       Projects will show when you start using Nextjs Starter Kit
//                     </p>
//                   </div>
//                 </div>
//               </main>
//             </div>
//           </CardContent>
//         </Card>
//       </div>
//     </div>
//   )
// }

"use client";

import React, { useState } from "react";
import Link from "next/link";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";
import {
  BarChart3,
  Calendar,
  Youtube,
  ChevronDown,
  Edit,
  Eye,
  Github,
  Globe,
  GripVertical,
  Instagram,
  Link as LinkIcon,
  Mail,
  MousePointer,
  Palette,
  Plus,
  Smartphone,
  Trash2,
  TrendingUp,
  Twitter,
  Upload,
  User,
  Users,
} from "lucide-react";

// Types
export interface LinkItem {
  id: string;
  title: string;
  url: string;
  clicks: number;
  isActive: boolean;
  icon?: string;
  featured?: boolean;
}

export interface UserProfile {
  id: string;
  displayName: string;
  bio: string;
  avatar: string;
  username: string;
  verified: boolean;
  theme: string;
  links: LinkItem[];
  views: number;
}

export interface Theme {
  id: string;
  name: string;
  gradient: string;
  bg: string;
}

// Constants
export const iconMap = {
  globe: Globe,
  youtube: Youtube,
  instagram: Instagram,
  twitter: Twitter,
  github: Github,
  mail: Mail,
  calendar: Calendar,
  link: LinkIcon,
};

export const themes: Theme[] = [
  {
    id: "default",
    name: "Default",
    gradient: "from-teal-400 to-purple-500",
    bg: "bg-slate-900",
  },
  {
    id: "ocean",
    name: "Ocean",
    gradient: "from-blue-500 to-cyan-500",
    bg: "bg-blue-900",
  },
  {
    id: "sunset",
    name: "Sunset",
    gradient: "from-orange-500 to-pink-500",
    bg: "bg-orange-900",
  },
  {
    id: "forest",
    name: "Forest",
    gradient: "from-green-500 to-emerald-500",
    bg: "bg-green-900",
  },
  {
    id: "midnight",
    name: "Midnight",
    gradient: "from-purple-600 to-indigo-600",
    bg: "bg-indigo-900",
  },
  {
    id: "rose",
    name: "Rose Gold",
    gradient: "from-pink-400 to-rose-400",
    bg: "bg-pink-900",
  },
];

// --- MOCK DATA (In a real app, this would come from an API) ---
const initialProfiles: UserProfile[] = [
  {
    id: "1",
    displayName: "Abelly Baba",
    username: "abellybaba",
    bio: "Full-stack developer and content creator. ðŸš€",
    avatar: "/placeholder.svg",
    verified: true,
    theme: "ocean",
    views: 10450,
    links: [
      {
        id: "1",
        title: "My Portfolio",
        url: "https://portfolio.com",
        clicks: 1245,
        isActive: true,
        icon: "globe",
        featured: true,
      },
      {
        id: "2",
        title: "YouTube Channel",
        url: "https://youtube.com/@abellybaba",
        clicks: 889,
        isActive: true,
        icon: "youtube",
      },
    ],
  },
  {
    id: "2",
    displayName: "My Side Hustle",
    username: "sidehustle",
    bio: "A fun project I'm working on in my spare time.",
    avatar: "/placeholder.svg",
    verified: false,
    theme: "forest",
    views: 2340,
    links: [
      {
        id: "3",
        title: "Project Website",
        url: "https://sidehustle.dev",
        clicks: 450,
        isActive: true,
        icon: "link",
      },
    ],
  },
];

// --- Child Components (No changes needed for most) ---

function StatsCards({
  totalViews,
  totalClicks,
}: {
  totalViews: number;
  totalClicks: number;
}) {
  const clickThroughRate =
    totalViews > 0 ? ((totalClicks / totalViews) * 100).toFixed(1) : "0.0";
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Total Views</CardTitle>
          <Eye className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">
            {totalViews.toLocaleString()}
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Total Clicks</CardTitle>
          <MousePointer className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">
            {totalClicks.toLocaleString()}
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">
            Click-Through Rate
          </CardTitle>
          <TrendingUp className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{clickThroughRate}%</div>
        </CardContent>
      </Card>
    </div>
  );
}

function LinksTab({
  links,
  onAddLink,
  onUpdateLink,
  onDeleteLink,
  onReorderLinks,
}: {
  links: LinkItem[];
  onAddLink: (link: Omit<LinkItem, "id" | "clicks" | "isActive">) => void;
  onUpdateLink: (id: string, updates: Partial<LinkItem>) => void;
  onDeleteLink: (id: string) => void;
  onReorderLinks: (reorderedLinks: LinkItem[]) => void;
}) {
  const [newLink, setNewLink] = useState({ title: "", url: "", icon: "link" });
  const [editingLink, setEditingLink] = useState<LinkItem | null>(null);
  const [draggedItem, setDraggedItem] = useState<string | null>(null);

  const handleAddLink = () => {
    if (newLink.title && newLink.url) {
      onAddLink({
        title: newLink.title,
        url: newLink.url,
        icon: newLink.icon,
        featured: false,
      });
      setNewLink({ title: "", url: "", icon: "link" });
    }
  };

  const handleUpdateLink = () => {
    if (editingLink) {
      onUpdateLink(editingLink.id, {
        title: editingLink.title,
        url: editingLink.url,
      });
      setEditingLink(null);
    }
  };

  const handleDragStart = (e: React.DragEvent, id: string) =>
    setDraggedItem(id);
  const handleDrop = (e: React.DragEvent, targetId: string) => {
    e.preventDefault();
    if (!draggedItem) return;
    const reordered = [...links];
    const draggedContent = links.find((l) => l.id === draggedItem);
    if (!draggedContent) return;
    const fromIndex = links.findIndex((l) => l.id === draggedItem);
    const toIndex = links.findIndex((l) => l.id === targetId);
    reordered.splice(fromIndex, 1);
    reordered.splice(toIndex, 0, draggedContent);
    onReorderLinks(reordered);
    setDraggedItem(null);
  };

  const getIconComponent = (iconName?: string) => {
    const Icon = iconMap[iconName as keyof typeof iconMap] || LinkIcon;
    return <Icon className="w-5 h-5 text-muted-foreground" />;
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Add New Link</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Input
              placeholder="Title"
              value={newLink.title}
              onChange={(e) =>
                setNewLink({ ...newLink, title: e.target.value })
              }
            />
            <Input
              placeholder="URL"
              value={newLink.url}
              onChange={(e) => setNewLink({ ...newLink, url: e.target.value })}
            />
            <select
              value={newLink.icon}
              onChange={(e) => setNewLink({ ...newLink, icon: e.target.value })}
              className="w-full p-2 border rounded-md bg-background text-sm"
            >
              {Object.keys(iconMap).map((key) => (
                <option key={key} value={key}>
                  {key.charAt(0).toUpperCase() + key.slice(1)}
                </option>
              ))}
            </select>
          </div>
          <Button onClick={handleAddLink}>
            <Plus className="w-4 h-4 mr-2" />
            Add Link
          </Button>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Your Links</CardTitle>
          <CardDescription>
            Drag to reorder, toggle to show/hide.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-3">
          {links.map((link) => (
            <div
              key={link.id}
              draggable
              onDragStart={(e) => handleDragStart(e, link.id)}
              onDragOver={(e) => e.preventDefault()}
              onDrop={(e) => handleDrop(e, link.id)}
              className={`flex items-center space-x-4 p-3 rounded-lg border cursor-move ${
                !link.isActive && "opacity-50"
              } ${draggedItem === link.id && "shadow-lg"}`}
            >
              <GripVertical className="w-5 h-5 text-muted-foreground" />
              {getIconComponent(link.icon)}
              <div className="flex-1">
                <h3 className="font-medium">{link.title}</h3>
                <p className="text-sm text-muted-foreground truncate">
                  {link.url}
                </p>
              </div>
              <div className="flex items-center space-x-4">
                <Switch
                  checked={link.isActive}
                  onCheckedChange={(c) =>
                    onUpdateLink(link.id, { isActive: c })
                  }
                />
                <Dialog onOpenChange={(open) => !open && setEditingLink(null)}>
                  <DialogTrigger asChild>
                    <Button
                      size="icon"
                      variant="ghost"
                      onClick={() => setEditingLink(link)}
                    >
                      <Edit className="w-4 h-4" />
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Edit Link</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4 py-4">
                      <Input
                        value={editingLink?.title}
                        onChange={(e) =>
                          editingLink &&
                          setEditingLink({
                            ...editingLink,
                            title: e.target.value,
                          })
                        }
                      />
                      <Input
                        value={editingLink?.url}
                        onChange={(e) =>
                          editingLink &&
                          setEditingLink({
                            ...editingLink,
                            url: e.target.value,
                          })
                        }
                      />
                      <Button onClick={handleUpdateLink}>Save Changes</Button>
                    </div>
                  </DialogContent>
                </Dialog>
                <Button
                  size="icon"
                  variant="ghost"
                  className="text-destructive hover:text-destructive"
                  onClick={() => onDeleteLink(link.id)}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            </div>
          ))}
        </CardContent>
      </Card>
    </div>
  );
}

function ProfileTab({
  profile,
  onUpdateProfile,
}: {
  profile: UserProfile;
  onUpdateProfile: (updates: Partial<UserProfile>) => void;
}) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Profile Settings</CardTitle>
        <CardDescription>
          Update your public profile information.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="flex items-center space-x-6">
          <Avatar className="w-20 h-20">
            <AvatarImage src={profile.avatar || "/placeholder.svg"} />
            <AvatarFallback className="text-2xl">
              {profile.displayName
                .split(" ")
                .map((n) => n[0])
                .join("")}
            </AvatarFallback>
          </Avatar>
          <Button variant="outline">
            <Upload className="w-4 h-4 mr-2" />
            Change Photo
          </Button>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="displayName">Display Name</Label>
            <Input
              id="displayName"
              value={profile.displayName}
              onChange={(e) => onUpdateProfile({ displayName: e.target.value })}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="username">Username</Label>
            <Input
              id="username"
              value={profile.username}
              onChange={(e) => onUpdateProfile({ username: e.target.value })}
            />
          </div>
        </div>
        <div className="space-y-2">
          <Label htmlFor="bio">Bio</Label>
          <Textarea
            id="bio"
            value={profile.bio}
            onChange={(e) => onUpdateProfile({ bio: e.target.value })}
            rows={3}
          />
        </div>
      </CardContent>
    </Card>
  );
}

function AppearanceTab({
  currentThemeId,
  onUpdateTheme,
}: {
  currentThemeId: string;
  onUpdateTheme: (themeId: string) => void;
}) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Palette className="w-5 h-5 mr-2" />
          Theme
        </CardTitle>
        <CardDescription>Choose a theme for your public page.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          {themes.map((theme) => (
            <div
              key={theme.id}
              onClick={() => onUpdateTheme(theme.id)}
              className="cursor-pointer group"
            >
              <div
                className={`p-2 rounded-lg bg-gradient-to-br ${
                  theme.gradient
                } transition-all group-hover:scale-105 ${
                  currentThemeId === theme.id
                    ? "ring-2 ring-primary ring-offset-2 ring-offset-background"
                    : ""
                }`}
              >
                <div className="w-full h-16 bg-background/50 rounded-md" />
              </div>
              <p className="text-center font-medium mt-2 text-sm">
                {theme.name}
              </p>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}

function AnalyticsTab() {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <BarChart3 className="w-5 h-5 mr-2" />
          Analytics
        </CardTitle>
        <CardDescription>Performance and audience insights.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="h-80 rounded-lg border bg-muted flex items-center justify-center">
          <p className="text-muted-foreground">Analytics charts coming soon.</p>
        </div>
      </CardContent>
    </Card>
  );
}

function LivePreview({
  profile,
  links,
}: {
  profile: UserProfile;
  links: LinkItem[];
}) {
  const currentTheme = themes.find((t) => t.id === profile.theme) || themes[0];
  const getIconComponent = (iconName?: string) => {
    const Icon = iconMap[iconName as keyof typeof iconMap] || LinkIcon;
    return <Icon className="w-5 h-5" />;
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Smartphone className="w-5 h-5 mr-2" />
          Live Preview
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="mx-auto w-full max-w-[280px] h-[500px] bg-card-foreground rounded-3xl p-3 border-4 border-muted">
          <div
            className={`w-full h-full rounded-2xl p-4 flex flex-col items-center space-y-4 overflow-hidden ${currentTheme.bg}`}
          >
            <Avatar className="w-16 h-16 border-2 border-white/20">
              <AvatarImage src={profile.avatar || "/placeholder.svg"} />
              <AvatarFallback
                className={`bg-gradient-to-br ${currentTheme.gradient} text-white text-lg`}
              >
                {profile.displayName
                  .split(" ")
                  .map((n) => n[0])
                  .join("")}
              </AvatarFallback>
            </Avatar>
            <div className="text-center">
              <h3 className="text-white font-semibold text-lg">
                {profile.displayName}
              </h3>
              <p className="text-sm text-gray-300 mt-1 line-clamp-2">
                {profile.bio}
              </p>
            </div>
            <div className="w-full space-y-2 flex-1 overflow-y-auto pt-2">
              {links
                .filter((l) => l.isActive)
                .map((link) => (
                  <div
                    key={link.id}
                    className={`w-full p-3 rounded-lg text-center ${
                      link.featured
                        ? `bg-gradient-to-r ${currentTheme.gradient}`
                        : "bg-white/10"
                    }`}
                  >
                    <div className="flex items-center justify-center space-x-2 text-white">
                      {getIconComponent(link.icon)}
                      <p className="text-sm font-medium">{link.title}</p>
                    </div>
                  </div>
                ))}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

// --- Main Page Component ---

export default function DashboardPage() {
  const [profiles, setProfiles] = useState<UserProfile[]>(initialProfiles);
  const [currentProfileId, setCurrentProfileId] = useState<string>("1");
  const [isCreateModalOpen, setCreateModalOpen] = useState(false);
  const [newProfileData, setNewProfileData] = useState({
    displayName: "",
    username: "",
  });

  const currentProfile = profiles.find((p) => p.id === currentProfileId);

  if (!currentProfile) {
    // Fallback in case a profile is not found
    return <div>Error: Profile not found.</div>;
  }

  const totalClicks = currentProfile.links.reduce(
    (sum, link) => sum + link.clicks,
    0
  );

  const updateProfileInList = (
    profileId: string,
    updates: Partial<UserProfile>
  ) => {
    setProfiles(
      profiles.map((p) => (p.id === profileId ? { ...p, ...updates } : p))
    );
  };

  const addLink = (link: Omit<LinkItem, "id" | "clicks" | "isActive">) => {
    const newLink = {
      ...link,
      id: Date.now().toString(),
      clicks: 0,
      isActive: true,
    };
    const updatedLinks = [...currentProfile.links, newLink];
    updateProfileInList(currentProfile.id, { links: updatedLinks });
  };

  const updateLink = (id: string, updates: Partial<LinkItem>) => {
    const updatedLinks = currentProfile.links.map((link) =>
      link.id === id ? { ...link, ...updates } : link
    );
    updateProfileInList(currentProfile.id, { links: updatedLinks });
  };

  const deleteLink = (id: string) => {
    const updatedLinks = currentProfile.links.filter((link) => link.id !== id);
    updateProfileInList(currentProfile.id, { links: updatedLinks });
  };

  const reorderLinks = (reorderedLinks: LinkItem[]) => {
    updateProfileInList(currentProfile.id, { links: reorderedLinks });
  };

  const updateProfileDetails = (updates: Partial<UserProfile>) => {
    updateProfileInList(currentProfile.id, updates);
  };

  const handleCreateProfile = () => {
    if (!newProfileData.displayName || !newProfileData.username) return;
    const newProfile: UserProfile = {
      id: Date.now().toString(),
      ...newProfileData,
      bio: "",
      avatar: "/placeholder.svg",
      verified: false,
      theme: "default",
      links: [],
      views: 0,
    };
    setProfiles([...profiles, newProfile]);
    setCurrentProfileId(newProfile.id);
    setCreateModalOpen(false);
    setNewProfileData({ displayName: "", username: "" });
  };

  return (
    <div className="flex flex-col min-h-screen bg-background text-foreground">
      <header className="sticky top-0 z-30 flex h-14 items-center gap-4 border-b bg-background px-4 sm:static sm:h-auto sm:border-0 sm:bg-transparent sm:px-6">
        <Dialog open={isCreateModalOpen} onOpenChange={setCreateModalOpen}>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="flex items-center gap-2">
                <Avatar className="w-6 h-6">
                  <AvatarImage src={currentProfile.avatar} />
                  <AvatarFallback>
                    {currentProfile.displayName[0]}
                  </AvatarFallback>
                </Avatar>
                <span className="font-semibold">
                  {currentProfile.displayName}
                </span>
                <ChevronDown className="w-4 h-4 text-muted-foreground" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="start">
              <DropdownMenuLabel>Select a Profile</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuGroup>
                {profiles.map((profile) => (
                  <DropdownMenuItem
                    key={profile.id}
                    onClick={() => setCurrentProfileId(profile.id)}
                    className="flex items-center gap-2"
                  >
                    <Avatar className="w-6 h-6">
                      <AvatarImage src={profile.avatar} />
                      <AvatarFallback>{profile.displayName[0]}</AvatarFallback>
                    </Avatar>
                    <span>{profile.displayName}</span>
                  </DropdownMenuItem>
                ))}
              </DropdownMenuGroup>
              <DropdownMenuSeparator />
              <DialogTrigger asChild>
                <DropdownMenuItem className="flex items-center gap-2">
                  <Plus className="w-4 h-4" />
                  <span>Create New Profile</span>
                </DropdownMenuItem>
              </DialogTrigger>
            </DropdownMenuContent>
          </DropdownMenu>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Create New vLink Profile</DialogTitle>
              <DialogDescription>
                Set up a new profile to manage your links.
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="new-displayName">Display Name</Label>
                <Input
                  id="new-displayName"
                  placeholder="My Awesome Project"
                  value={newProfileData.displayName}
                  onChange={(e) =>
                    setNewProfileData({
                      ...newProfileData,
                      displayName: e.target.value,
                    })
                  }
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="new-username">Username</Label>
                <Input
                  id="new-username"
                  placeholder="awesome-project"
                  value={newProfileData.username}
                  onChange={(e) =>
                    setNewProfileData({
                      ...newProfileData,
                      username: e.target.value,
                    })
                  }
                />
              </div>
              <Button onClick={handleCreateProfile} className="w-full">
                Create Profile
              </Button>
            </div>
          </DialogContent>
        </Dialog>

        <div className="ml-auto flex items-center gap-4">
          <Button variant="outline" asChild>
            <Link href={`/u/${currentProfile.username}`} target="_blank">
              <Eye className="h-4 w-4 mr-2" />
              View Public Page
            </Link>
          </Button>
          <Avatar>
            <AvatarImage src={currentProfile.avatar || "/placeholder.svg"} />
            <AvatarFallback>
              {currentProfile.displayName
                .split(" ")
                .map((n) => n[0])
                .join("")}
            </AvatarFallback>
          </Avatar>
        </div>
      </header>

      <main className="flex-1 p-4 sm:px-6 sm:py-0">
        <div className="grid lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-6">
            <StatsCards
              totalClicks={totalClicks}
              totalViews={currentProfile.views}
            />

            <Tabs defaultValue="links" className="space-y-6">
              <TabsList>
                <TabsTrigger value="links">Links</TabsTrigger>
                <TabsTrigger value="profile">Profile</TabsTrigger>
                <TabsTrigger value="appearance">Appearance</TabsTrigger>
                <TabsTrigger value="analytics">Analytics</TabsTrigger>
              </TabsList>

              <TabsContent value="links">
                <LinksTab
                  links={currentProfile.links}
                  onAddLink={addLink}
                  onUpdateLink={updateLink}
                  onDeleteLink={deleteLink}
                  onReorderLinks={reorderLinks}
                />
              </TabsContent>
              <TabsContent value="profile">
                <ProfileTab
                  profile={currentProfile}
                  onUpdateProfile={updateProfileDetails}
                />
              </TabsContent>
              <TabsContent value="appearance">
                <AppearanceTab
                  currentThemeId={currentProfile.theme}
                  onUpdateTheme={(themeId) =>
                    updateProfileDetails({ theme: themeId })
                  }
                />
              </TabsContent>
              <TabsContent value="analytics">
                <AnalyticsTab />
              </TabsContent>
            </Tabs>
          </div>

          <div className="lg:col-span-1">
            <div className="sticky top-20">
              <LivePreview
                profile={currentProfile}
                links={currentProfile.links}
              />
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
